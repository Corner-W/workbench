# Matt Wang's zsh profile for general Linux/Unix
#
# Implementation notes:
#
# - Functions with name starts with '__' are considered 'private' and will be
#   unset at the end.
# - Functions with name starts with only one '_' are considered 'protected',
#   users can implement their own to override (via ~/.profiles.d).

# Find a file which name matches given pattern (ERE, case insensitive)
function f
{
    local pat=${1?'Usage: f ERE-pattern [path...]'}
    shift
    find ${@:-.} \( -path '*/.svn' -o -path '*/.git' -o -path '*/.idea' \) \
        -prune -o -print -follow | grep -iE "$pat"
}

# Load file list generated by f() in vim, type 'gf' to jump to the file
function vif
{
    local tmpf=/tmp/viftmpfile.$RANDOM$$
    f "$@" > $tmpf && vi -c "/$1" $tmpf && rm -f $tmpf
}

# "Protected" helper to decorate CWD used to setup PROMPT
function _source_control_cwd
{
    [[ $PWD != ${HOME}* ]] || { echo ${PWD/$HOME/\~}; return 0; }
    echo $PWD
}

# "Protected" helper to decorate source control information used to setup
# PROMPT, by default this only detect active git branch information. User can
# extend this to detect other version control system.
#
function _source_control_info
{
    if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]]; then
        _git_active_branch
    fi
}

function _git_active_branch
{
    local branch info age track

    branch=$(git symbolic-ref HEAD 2>/dev/null)
    branch=${branch#refs/heads/}
    info=$(git status -s 2>/dev/null)
    age=$(git log --pretty=format:'%cr' -1 refs/heads/$branch 2>/dev/null)
    track=$(git status -sb 2>/dev/null | sed -n 's/^##.*\[\(.*\)\].*/, \1/p')

    # XXX: $_DR and $_DG won't expand here
    if [[ -z $info ]]; then
        print -nP "%{\e[32m%}"
    elif [[ -z $(echo "$info" | grep -v '^??') ]]; then
        print -nP "%{\e[35m%}"
    else
        print -nP "%{\e[31m%}"
    fi

    print -n " ($branch) "  # No '-P' which does command expansion
    print -nP "%{\e[36m%}[${age}${track}]"
}

function __main
{
    local fn

    for fn in \
        __init_completion \
        __setup_path \
        __setup_shell_options \
        __setup_environments \
        __setup_aliases \
        __setup_completions \
        __setup_dir_colors \
        __setup_ssh_agent \
        __setup_prompt \
        __setup_custom_profiles \
    ; do
        $fn; unset -f $fn
    done
}

function __init_completion
{
    [[ ! -d ~/.zsh-completions ]] || fpath=(~/.zsh-completions/src $fpath)
    autoload -U compinit && compinit
}

function __prepend_path
{
    [[ :$PATH: == *:${1:?}:* ]] || PATH=$1:$PATH
}

function __setup_path
{
    local x

    # prepend paths
    for x in /sbin /usr/sbin /bin /usr/bin /usr/local/bin; do
        __prepend_path $x
    done

    # ~/bin takes precedence
    __prepend_path ~/bin

    export PATH
}

function __setup_shell_options
{
    set -o shwordsplit                  # ARG="foo bar"; $ARG => "foo" "bar"
    setopt prompt_subst
    setopt interactive_comments
    setopt nocase_glob
    setopt nocase_match 2>/dev/null     # does not work for zsh < 4.3
    setopt extended_history
    setopt hist_expire_dups_first
    setopt hist_ignore_dups
    setopt hist_ignore_space
    setopt hist_find_no_dups
    setopt hist_verify
    setopt share_history
    setopt auto_pushd
    setopt pushd_ignore_dups
    unsetopt nomatch
    unsetopt correct
    bindkey -e                          # Reclaim C-a, C-e, C-r, M-., etc.
    ! test -t 0 || stty stop undef      # Make 'C-s' to do fwd-i-search
    bindkey "^U" backward-kill-line     # Keep the same behavior as in bash
}

function __setup_environments
{
    export HISTFILE=~/.zhistory         # Prevent from ~/.zsh<tab> completion
    export HISTSIZE=10000
    export SAVEHIST=10000
    export EDITOR=vim

    # Locale (LC_*) matters for ls and sort on Linux, see also
    # www.gnu.org/software/coreutils/faq/#Sort-does-not-sort-in-normal-order_0021
    #
    [[ $(uname -s) != Linux ]] || export LC_COLLATE=C
}

function __setup_completions
{
    zstyle ':completion:*' menu yes select
    zstyle ':completion:*' users off
    zmodload zsh/complist
    bindkey -M menuselect '^M' .accept-line     # <Enter> only once to accept
    ZLE_REMOVE_SUFFIX_CHARS=                    # no space after, zshparam(1)

    # Fix default host completion
    __hosts=($(sed -ne 's/[, ].*//p' ~/.ssh/known_hosts* 2>/dev/null))
    zstyle ':completion:*:hosts' hosts $__hosts
}

function __setup_aliases
{
    local lsprog="/bin/ls"

    alias ..='cd ..'
    alias ...='cd ../..'
    alias ....='cd ../../..'
    alias .....='cd ../../../..'
    # Skip system wide vimrc to reduce startup time
    ! type vim >& /dev/null || alias vi='vim -Xn -u ~/.vimrc'
    ! type ag >& /dev/null || alias ag='command ag --nogroup'
    alias grep='grep --color=auto'

    case $(uname -s) in
        Linux)
            lsprog="/bin/ls --color=auto"
            alias ls="$lsprog -F"
            alias l="$lsprog -lF"
            alias lsps='ps -ef f | grep -vw grep | grep -i'
            ;;
        Darwin)
            type gls >& /dev/null && lsprog="gls --color=auto"
            alias ls="$lsprog -F"
            alias l="$lsprog -lF"
            alias lsps='ps -ax -o user,pid,ppid,stime,tty,time,command | grep -vw grep | grep -i'
            ;;
        *)
            alias ls="$lsprog -F"
            alias l="$lsprog -lF"
            alias lsps='ps -auf | grep -vw grep | grep -i'
            ;;
    esac
}

function __setup_dir_colors
{
    local prog=dircolors

    [[ $(uname -s) != Darwin ]] || prog=gdircolors
    if type $prog >& /dev/null && [[ -f ~/.dircolors ]]; then
        eval $($prog -b ~/.dircolors)
    fi
}

function __has_ssh_key
{
    [[ -f ~/.ssh/$USER.key ]] || ls ~/.ssh/id_?sa >& /dev/null
}

function __load_ssh_key
{
    [[ ! -f "${1:?}" ]] || ssh-add -L | grep -qw "$1" || ssh-add "$1"
}

# ssh-add -l exits code 2 when unable to connect to the agent
function __setup_ssh_agent
{
    local rc=~/.ssh-agent.rc

    # Skip in typical corporation environment
    [[ -z $SK_SIGNING_PLUGIN ]] || return 0

    __has_ssh_key || return 0
    [[ ! -f $rc ]] || source $rc
    if [[ $(ssh-add -l >& /dev/null; echo $?) == 2 ]]; then
        print -P "%{\e[31m%}Starting a new ssh-agent process...%{\e[0m%}" >&2
        rm -f ~/.ssh-agent.sock
        ssh-agent -s -a ~/.ssh-agent.sock | sed '/^echo/d' > $rc
        source $rc
    fi

    __load_ssh_key ~/.ssh/$USER.key
    __load_ssh_key ~/.ssh/id_rsa
    __load_ssh_key ~/.ssh/id_dsa
}

# Fancy PROMPT, prompt exit status of last command, currenet time, hostname,
# time, cwd, git status and branch, also prompt the '%' in reverse color when
# we have background jobs.
#
function __setup_prompt
{
    local _DR=$'%{\e[31m%}'       # red
    local _DG=$'%{\e[32m%}'       # green
    local _DY=$'%{\e[33m%}'       # yellow
    local _DB=$'%{\e[34m%}'       # blue
    local _DM=$'%{\e[35m%}'       # magenta
    local _DC=$'%{\e[36m%}'       # cyan
    local _RV=$'%{\e[7m%}'        # reverse
    local _NC=$'%{\e[0m%}'        # reset color

    PROMPT="\$([[ \$? == 0 ]] && echo '${_DG}✔' || echo '${_DR}✘') %* "

    # Detect whether this box has ssh keys, distinguish hostname color and setup
    # ssh-agent related environment accordingly
    #
    if __has_ssh_key; then
        # I am on my own machine, try load ssh-agent related environments
        PROMPT+="${_DB}"                                # blue hostname
    else
        # Otherwise assume I am on other's box, highlight hostname in magenta
        PROMPT+="${_DM}"                                # magenta hostname
    fi

    # Highlight hostname in reverse green if inside a container
    if [[ -n $container_uuid ]] || [[ -f /.dockerenv ]]; then
        PROMPT+="${_RV}${_DG}"
    fi
    PROMPT+="$(hostname -f | cut -d. -f1-2)"            # 2 hostname components
    PROMPT+="${_NC}:${_DY}\$(_source_control_cwd)"      # yellow cwd
    PROMPT+="${_NC}\$(_source_control_info)"            # source control info
    PROMPT+=" ${_DC}"$'⤾\n'                             # cyan wrap char, NL
    PROMPT+="\$([[ -z \$(jobs) ]] || echo '${_RV}')"    # reverse bg job
    PROMPT+="%#${_NC} "                                 # % or #
}

# Load custom settings from ~/.profile.d/*.sh, typical settings are
# docker-machine env, GOPATH, customized PATH etc.
#
function __setup_custom_profiles
{
    local p

    ls ~/.profiles.d/*.sh >& /dev/null || return 0

    for p in ~/.profiles.d/*.sh; do
        source $p
    done
}

########################################################################
# Setup everything and unset the rest "private" functions
########################################################################

__main
unset -f __prepend_path __has_ssh_key __load_ssh_key __main

# vim:set et sts=4 sw=4 ft=zsh:
